{"ast":null,"code":"import request from \"@/utils/request\";\nexport default {\n  name: \"Header\",\n  data() {\n    return {\n      user: {}\n    };\n  },\n  created() {\n    this.user = JSON.parse(sessionStorage.getItem('user') || \"{}\");\n  },\n  methods: {\n    handleAvatarSuccess(res, file) {\n      this.user.avatar = res.data;\n      sessionStorage.setItem('user', JSON.stringify(this.user));\n      // 将头像 URL 保存到数据库\n      request.put(\"/user\", this.user).then(res => {\n        if (res.code === '0') {\n          this.$message({\n            type: 'success',\n            message: \"头像更新成功\"\n          });\n        } else {\n          this.$message({\n            type: 'error',\n            message: res.msg\n          });\n        }\n      });\n    },\n    beforeAvatarUpload(file) {\n      const isJPG = file.type === 'image/jpeg';\n      const isPNG = file.type === 'image/png';\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isJPG && !isPNG) {\n        this.$message.error('上传头像图片只能是 JPG 或 PNG 格式!');\n      }\n      if (!isLt2M) {\n        this.$message.error('上传头像图片大小不能超过 2MB!');\n      }\n      return (isJPG || isPNG) && isLt2M;\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","user","created","JSON","parse","sessionStorage","getItem","methods","handleAvatarSuccess","res","file","avatar","setItem","stringify","put","then","code","$message","type","message","msg","beforeAvatarUpload","isJPG","isPNG","isLt2M","size","error"],"sources":["C:\\Users\\哈振宇\\Desktop\\软件工程\\springboot+vue框架\\demo\\vue\\src\\components\\Header.vue"],"sourcesContent":["<template>\n  <div style=\"height: 50px; line-height: 50px; border-bottom: 1px solid #ccc; display: flex;\">\n    <div style=\"width: 200px; padding-left: 30px;font-weight: bold; color: dodgerblue\">后台管理</div>\n    <div style=\"flex: 1\"></div>\n    <div style=\"width: 200px; padding-top: 10px; display: flex; align-items: center;\">\n      <el-upload\n        action=\"http://localhost:9090/files/upload\"\n        :show-file-list=\"false\"\n        :on-success=\"handleAvatarSuccess\"\n        :before-upload=\"beforeAvatarUpload\"\n        style=\"margin-right: 10px; margin-top: 5px;\"\n      >\n        <el-avatar :size=\"40\" :src=\"user.avatar\" />\n      </el-upload>\n      <el-dropdown split-button type=\"primary\" style=\"margin-left: 10px;\">\n          {{user.nickname}}\n        <template #dropdown>\n          <el-dropdown-menu>\n            <el-dropdown-item @click=\"$router.push('/person')\">个人信息</el-dropdown-item>\n            <el-dropdown-item @click=\"$router.push('/login')\">退出系统</el-dropdown-item>\n          </el-dropdown-menu>\n        </template>\n      </el-dropdown>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\n\nexport default {\n  name: \"Header\",\n  data() {\n    return {\n      user: {}\n    }\n  },\n  created() {\n    this.user = JSON.parse(sessionStorage.getItem('user') || \"{}\");\n  },\n  methods: {\n    handleAvatarSuccess(res, file) {\n      this.user.avatar = res.data;\n      sessionStorage.setItem('user', JSON.stringify(this.user));\n      // 将头像 URL 保存到数据库\n      request.put(\"/user\", this.user).then(res => {\n        if (res.code === '0') {\n          this.$message({\n            type: 'success',\n            message: \"头像更新成功\"\n          });\n        } else {\n          this.$message({\n            type: 'error',\n            message: res.msg\n          });\n        }\n      });\n    },\n    beforeAvatarUpload(file) {\n      const isJPG = file.type === 'image/jpeg';\n      const isPNG = file.type === 'image/png';\n      const isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG && !isPNG) {\n        this.$message.error('上传头像图片只能是 JPG 或 PNG 格式!');\n      }\n      if (!isLt2M) {\n        this.$message.error('上传头像图片大小不能超过 2MB!');\n      }\n      return (isJPG || isPNG) && isLt2M;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.avatar-uploader {\n  margin-right: 10px;\n}\n</style>"],"mappings":"AA4BA,OAAOA,OAAM,MAAO,iBAAiB;AAErC,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC;IACT;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,IAAG,GAAIE,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC;EAChE,CAAC;EACDC,OAAO,EAAE;IACPC,mBAAmBA,CAACC,GAAG,EAAEC,IAAI,EAAE;MAC7B,IAAI,CAACT,IAAI,CAACU,MAAK,GAAIF,GAAG,CAACT,IAAI;MAC3BK,cAAc,CAACO,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAAC,IAAI,CAACZ,IAAI,CAAC,CAAC;MACzD;MACAH,OAAO,CAACgB,GAAG,CAAC,OAAO,EAAE,IAAI,CAACb,IAAI,CAAC,CAACc,IAAI,CAACN,GAAE,IAAK;QAC1C,IAAIA,GAAG,CAACO,IAAG,KAAM,GAAG,EAAE;UACpB,IAAI,CAACC,QAAQ,CAAC;YACZC,IAAI,EAAE,SAAS;YACfC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,OAAO;UACL,IAAI,CAACF,QAAQ,CAAC;YACZC,IAAI,EAAE,OAAO;YACbC,OAAO,EAAEV,GAAG,CAACW;UACf,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IACDC,kBAAkBA,CAACX,IAAI,EAAE;MACvB,MAAMY,KAAI,GAAIZ,IAAI,CAACQ,IAAG,KAAM,YAAY;MACxC,MAAMK,KAAI,GAAIb,IAAI,CAACQ,IAAG,KAAM,WAAW;MACvC,MAAMM,MAAK,GAAId,IAAI,CAACe,IAAG,GAAI,IAAG,GAAI,IAAG,GAAI,CAAC;MAE1C,IAAI,CAACH,KAAI,IAAK,CAACC,KAAK,EAAE;QACpB,IAAI,CAACN,QAAQ,CAACS,KAAK,CAAC,yBAAyB,CAAC;MAChD;MACA,IAAI,CAACF,MAAM,EAAE;QACX,IAAI,CAACP,QAAQ,CAACS,KAAK,CAAC,mBAAmB,CAAC;MAC1C;MACA,OAAO,CAACJ,KAAI,IAAKC,KAAK,KAAKC,MAAM;IACnC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}